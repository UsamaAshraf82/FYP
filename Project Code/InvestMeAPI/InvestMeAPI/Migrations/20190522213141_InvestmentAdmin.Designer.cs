// <auto-generated />
using System;
using InvestMeAPI.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    [Migration("20190522213141_InvestmentAdmin")]
    partial class InvestmentAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 183, 79, 134, 9, 51, 17, 159, 11, 24, 230, 136, 169, 135, 208, 184, 48, 164, 8, 51, 56, 164, 43, 65, 222, 20, 159, 72, 43, 15, 242, 160, 42, 78, 123, 47, 148, 22, 224, 38, 60, 101, 210, 236, 142, 219, 191, 199, 127, 152, 61, 147, 250, 166, 171, 253, 245, 200, 26, 25, 102, 28, 136, 74, 182 },
                            PasswordSalt = new byte[] { 93, 189, 16, 143, 76, 124, 178, 101, 130, 250, 225, 22, 95, 146, 53, 20, 134, 137, 71, 63, 147, 31, 148, 6, 255, 0, 26, 171, 29, 14, 196, 110, 166, 57, 3, 71, 125, 67, 26, 76, 60, 189, 14, 66, 77, 111, 1, 49, 121, 205, 41, 197, 78, 114, 36, 25, 70, 94, 228, 91, 61, 19, 156, 141, 18, 152, 59, 245, 26, 148, 90, 146, 23, 13, 97, 176, 190, 117, 45, 254, 124, 83, 189, 138, 154, 130, 187, 46, 186, 193, 241, 95, 51, 203, 154, 44, 60, 71, 24, 117, 159, 129, 97, 139, 87, 8, 42, 211, 184, 193, 166, 166, 129, 16, 22, 149, 80, 223, 71, 32, 220, 24, 121, 63, 216, 227, 139, 244 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AdminComment");

                    b.Property<string>("Cardimage");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PKR");

                    b.Property<string>("Discription");

                    b.Property<DateTime?>("EstimatedFirstProfit")
                        .HasColumnType("date");

                    b.Property<long?>("Fund")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Headerimage");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<string>("IsVarified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("NeedFundBefore")
                        .HasColumnType("date");

                    b.Property<string>("Stage");

                    b.Property<string>("Summary");

                    b.Property<string>("Tag1");

                    b.Property<string>("Tag2");

                    b.Property<string>("Tag3");

                    b.Property<string>("Title");

                    b.Property<long?>("TotalCost")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("AdminShare");

                    b.Property<int>("CampaignId");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePic");

                    b.Property<string>("Story");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Campaign", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Campaign_Category");

                    b.HasOne("Invest_Me_Web_React_Application.Models.User", "User")
                        .WithMany("Campaign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Campaign_User");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Invester", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("Invest_Me_Web_React_Application.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });
#pragma warning restore 612, 618
        }
    }
}
