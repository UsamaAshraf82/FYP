// <auto-generated />
using System;
using InvestMeAPI.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    [Migration("20190709120033_return")]
    partial class @return
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InvestMeAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 244, 74, 138, 119, 8, 185, 239, 123, 5, 28, 94, 191, 252, 211, 187, 223, 242, 14, 84, 54, 127, 228, 185, 142, 96, 105, 195, 251, 23, 235, 147, 217, 121, 225, 226, 24, 124, 99, 245, 157, 84, 234, 143, 230, 76, 144, 50, 117, 193, 30, 79, 49, 90, 204, 114, 22, 107, 16, 58, 7, 136, 216, 222, 248 },
                            PasswordSalt = new byte[] { 131, 28, 250, 134, 20, 159, 246, 124, 84, 81, 84, 32, 171, 118, 158, 188, 57, 164, 47, 123, 122, 163, 110, 145, 227, 50, 181, 224, 47, 20, 184, 22, 205, 103, 67, 79, 244, 67, 51, 109, 73, 177, 96, 171, 83, 5, 204, 102, 14, 7, 40, 104, 163, 188, 133, 154, 207, 6, 19, 116, 221, 88, 171, 90, 118, 95, 151, 90, 120, 84, 239, 248, 243, 156, 198, 247, 18, 80, 166, 243, 187, 39, 29, 237, 137, 138, 20, 144, 170, 185, 122, 203, 251, 120, 178, 227, 170, 191, 25, 27, 64, 211, 51, 164, 91, 132, 99, 242, 164, 156, 129, 192, 146, 135, 114, 80, 157, 84, 7, 11, 98, 84, 205, 248, 219, 230, 249, 25 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AdminComment");

                    b.Property<string>("CampaignStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ONGOING");

                    b.Property<string>("Cardimage");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PKR");

                    b.Property<string>("Discription");

                    b.Property<DateTime?>("EstimatedFirstProfit")
                        .HasColumnType("date");

                    b.Property<long?>("Fund")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Headerimage");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<string>("IsVarified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("NeedFundBefore")
                        .HasColumnType("date");

                    b.Property<string>("Stage");

                    b.Property<string>("Summary");

                    b.Property<string>("Tag1");

                    b.Property<string>("Tag2");

                    b.Property<string>("Tag3");

                    b.Property<string>("Title");

                    b.Property<long?>("TotalCost")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("AdminShare");

                    b.Property<int>("CampaignId");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.Property<int>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CampaignId");

                    b.Property<long>("ReturnInvestment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("ReturnID");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePic");

                    b.Property<string>("Story");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Campaign_Category");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Campaign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Campaign_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Return")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Return_campaign");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Return")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Return_User");
                });
#pragma warning restore 612, 618
        }
    }
}
