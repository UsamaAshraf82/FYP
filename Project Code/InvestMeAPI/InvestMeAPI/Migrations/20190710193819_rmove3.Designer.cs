// <auto-generated />
using System;
using InvestMeAPI.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    [Migration("20190710193819_rmove3")]
    partial class rmove3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InvestMeAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 141, 109, 182, 175, 244, 182, 66, 22, 230, 227, 255, 47, 171, 225, 116, 240, 252, 254, 8, 226, 225, 59, 168, 0, 130, 99, 109, 255, 22, 40, 55, 229, 191, 43, 239, 83, 164, 53, 236, 150, 33, 189, 112, 233, 29, 71, 40, 51, 133, 209, 43, 110, 215, 216, 67, 226, 71, 61, 244, 45, 188, 159, 215, 169 },
                            PasswordSalt = new byte[] { 6, 170, 42, 154, 84, 149, 40, 80, 206, 148, 19, 223, 108, 64, 66, 157, 69, 89, 180, 231, 138, 57, 188, 150, 233, 165, 91, 175, 252, 99, 157, 75, 45, 14, 102, 247, 180, 204, 138, 64, 102, 146, 45, 171, 55, 31, 69, 136, 244, 175, 235, 223, 92, 231, 18, 36, 241, 193, 68, 65, 173, 158, 238, 122, 252, 131, 60, 105, 75, 192, 133, 38, 125, 153, 9, 107, 12, 255, 139, 8, 5, 183, 182, 59, 152, 69, 23, 177, 166, 81, 248, 33, 227, 240, 33, 54, 115, 17, 203, 162, 48, 214, 62, 170, 133, 147, 232, 114, 5, 129, 248, 222, 28, 199, 102, 210, 147, 49, 204, 244, 194, 182, 231, 54, 207, 105, 104, 75 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AdminComment");

                    b.Property<string>("CampaignStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ONGOING");

                    b.Property<string>("Cardimage");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PKR");

                    b.Property<string>("Discription");

                    b.Property<DateTime?>("EstimatedFirstProfit")
                        .HasColumnType("date");

                    b.Property<long?>("Fund")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Headerimage");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<string>("IsVarified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("NeedFundBefore")
                        .HasColumnType("date");

                    b.Property<string>("Stage");

                    b.Property<string>("Summary");

                    b.Property<string>("Tag1");

                    b.Property<string>("Tag2");

                    b.Property<string>("Tag3");

                    b.Property<string>("Title");

                    b.Property<long?>("TotalCost")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("AdminShare");

                    b.Property<int>("CampaignId");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.Property<int>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime");

                    b.Property<int>("CampaignId");

                    b.Property<long>("ReturnInvestment");

                    b.Property<int?>("UserId");

                    b.HasKey("ReturnID");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Return");
                });

            modelBuilder.Entity("InvestMeAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePic");

                    b.Property<string>("Story");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Campaign_Category");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Campaign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Campaign_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Return")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InvestMeAPI.Models.User")
                        .WithMany("Return")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
