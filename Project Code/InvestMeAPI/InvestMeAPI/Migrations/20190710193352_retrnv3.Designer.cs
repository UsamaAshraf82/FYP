// <auto-generated />
using System;
using InvestMeAPI.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    [Migration("20190710193352_retrnv3")]
    partial class retrnv3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InvestMeAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 222, 21, 34, 124, 109, 254, 16, 91, 12, 1, 92, 31, 78, 148, 74, 137, 156, 193, 92, 7, 34, 216, 85, 163, 201, 253, 96, 124, 63, 175, 76, 156, 190, 90, 153, 234, 165, 167, 212, 52, 126, 125, 52, 70, 46, 39, 42, 55, 113, 173, 242, 76, 5, 155, 90, 53, 235, 198, 145, 106, 240, 108, 141, 25 },
                            PasswordSalt = new byte[] { 115, 76, 17, 24, 38, 124, 172, 97, 80, 52, 176, 112, 70, 95, 114, 247, 194, 87, 55, 170, 211, 17, 12, 47, 228, 63, 95, 240, 35, 175, 144, 108, 41, 206, 130, 177, 1, 176, 55, 6, 203, 71, 141, 15, 172, 113, 100, 50, 63, 40, 237, 200, 196, 168, 200, 43, 162, 237, 235, 170, 18, 81, 202, 8, 235, 231, 147, 134, 50, 140, 6, 174, 152, 162, 168, 187, 142, 244, 69, 158, 91, 165, 84, 242, 173, 75, 183, 198, 32, 101, 45, 204, 176, 179, 138, 90, 117, 120, 195, 103, 40, 245, 188, 36, 202, 63, 69, 159, 84, 54, 165, 232, 56, 27, 191, 53, 25, 77, 123, 160, 188, 37, 205, 2, 159, 166, 179, 164 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AdminComment");

                    b.Property<string>("CampaignStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ONGOING");

                    b.Property<string>("Cardimage");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PKR");

                    b.Property<string>("Discription");

                    b.Property<DateTime?>("EstimatedFirstProfit")
                        .HasColumnType("date");

                    b.Property<long?>("Fund")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Headerimage");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<string>("IsVarified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("NeedFundBefore")
                        .HasColumnType("date");

                    b.Property<string>("Stage");

                    b.Property<string>("Summary");

                    b.Property<string>("Tag1");

                    b.Property<string>("Tag2");

                    b.Property<string>("Tag3");

                    b.Property<string>("Title");

                    b.Property<long?>("TotalCost")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("AdminShare");

                    b.Property<int>("CampaignId");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.Property<int>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CampaignId");

                    b.Property<long>("ReturnInvestment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int?>("UserId");

                    b.HasKey("ReturnID");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePic");

                    b.Property<string>("Story");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Campaign_Category");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Campaign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Campaign_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Return", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Return")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Return_campaign");

                    b.HasOne("InvestMeAPI.Models.User")
                        .WithMany("Return")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
