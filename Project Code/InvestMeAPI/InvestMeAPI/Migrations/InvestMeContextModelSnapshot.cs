// <auto-generated />
using System;
using InvestMeAPI.Helper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    partial class InvestMeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InvestMeAPI.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 249, 50, 11, 44, 91, 36, 241, 171, 195, 27, 85, 36, 187, 39, 115, 176, 222, 223, 21, 59, 102, 122, 155, 180, 226, 49, 158, 252, 236, 203, 92, 20, 176, 236, 21, 38, 250, 202, 19, 198, 90, 178, 18, 16, 249, 13, 96, 13, 110, 67, 16, 169, 57, 144, 110, 136, 99, 101, 109, 232, 183, 225, 231, 24 },
                            PasswordSalt = new byte[] { 161, 107, 225, 152, 32, 32, 0, 73, 19, 166, 67, 132, 122, 43, 217, 7, 62, 223, 56, 171, 151, 5, 37, 110, 180, 24, 233, 13, 9, 86, 1, 42, 23, 57, 185, 214, 206, 157, 6, 103, 47, 24, 125, 44, 243, 53, 234, 127, 231, 72, 137, 95, 12, 191, 192, 23, 118, 71, 190, 112, 121, 9, 44, 183, 173, 101, 96, 2, 56, 74, 172, 38, 36, 128, 183, 171, 2, 114, 164, 5, 242, 159, 211, 253, 105, 23, 109, 121, 99, 56, 142, 211, 21, 83, 81, 15, 34, 150, 126, 205, 17, 34, 229, 108, 12, 157, 119, 29, 253, 15, 214, 117, 199, 211, 100, 249, 178, 95, 194, 191, 44, 27, 78, 202, 227, 250, 141, 32 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("AdminComment");

                    b.Property<string>("CampaignStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("ONGOING");

                    b.Property<string>("Cardimage");

                    b.Property<int?>("CategoryID");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CurrencyUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PKR");

                    b.Property<string>("Discription");

                    b.Property<DateTime?>("EstimatedFirstProfit")
                        .HasColumnType("date");

                    b.Property<long?>("Fund")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Headerimage");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<string>("IsVarified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("PENDING");

                    b.Property<DateTime?>("NeedFundBefore")
                        .HasColumnType("date");

                    b.Property<string>("Stage");

                    b.Property<string>("Summary");

                    b.Property<string>("Tag1");

                    b.Property<string>("Tag2");

                    b.Property<string>("Tag3");

                    b.Property<string>("Title");

                    b.Property<long?>("TotalCost")
                        .HasColumnType("BIGINT");

                    b.Property<int>("UserId");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("AdminShare");

                    b.Property<int>("CampaignId");

                    b.Property<long>("Investment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("InvestMeAPI.Models.ReturnInvestments", b =>
                {
                    b.Property<int>("ReturnInvestmentsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CampaignId");

                    b.Property<long>("ReturnInvestment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasDefaultValue(0L);

                    b.Property<int?>("UserId");

                    b.HasKey("ReturnInvestmentsID");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("InvestMeAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo");

                    b.Property<string>("ProfilePic");

                    b.Property<string>("Story");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Campaign", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Campaign_Category");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Campaign")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Campaign_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.Invester", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("InvestMeAPI.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });

            modelBuilder.Entity("InvestMeAPI.Models.ReturnInvestments", b =>
                {
                    b.HasOne("InvestMeAPI.Models.Campaign", "Campaign")
                        .WithMany("ReturnInvestments")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Return_campaign");

                    b.HasOne("InvestMeAPI.Models.User")
                        .WithMany("Return")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
