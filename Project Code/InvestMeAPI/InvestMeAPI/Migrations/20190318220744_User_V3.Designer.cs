// <auto-generated />
using System;
using InvestMeAPI.Helper;
using InvestMeAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvestMeAPI.Migrations
{
    [DbContext(typeof(InvestMeContext))]
    [Migration("20190318220744_User_V3")]
    partial class User_V3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cardimage");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Duration")
                        .HasColumnType("date");

                    b.Property<decimal?>("Fund")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("Likes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("StageId");

                    b.Property<int>("TagId");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Views")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("StageId");

                    b.HasIndex("TagId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Category", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Entrepreneur", b =>
                {
                    b.Property<int>("EntrepreneurId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<decimal>("Investment")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("UserId");

                    b.HasKey("EntrepreneurId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Entrepreneurs");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Invester", b =>
                {
                    b.Property<int>("InvesterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignId");

                    b.Property<decimal>("Investment")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("UserId");

                    b.HasKey("InvesterId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("Investers");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("StageId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsUnicode(false);

                    b.Property<int?>("CityId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .IsUnicode(true);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ProfilePic");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Campaign", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.Category", "Category")
                        .WithMany("Campaign")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_cat_ID_Capmaign");

                    b.HasOne("Invest_Me_Web_React_Application.Models.City", "City")
                        .WithMany("Campaign")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fkcity_Id");

                    b.HasOne("Invest_Me_Web_React_Application.Models.Stage", "Stage")
                        .WithMany("Campaign")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_stageId_campaign");

                    b.HasOne("Invest_Me_Web_React_Application.Models.Tag", "Tag")
                        .WithMany("Campaign")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_tagID_campaign");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Entrepreneur", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.Campaign", "Campaign")
                        .WithMany("Entrepreneur")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Entrepreneur_campaign");

                    b.HasOne("Invest_Me_Web_React_Application.Models.User", "User")
                        .WithMany("Entrepreneur")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Entrepreneur_User");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.Invester", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.Campaign", "Campaign")
                        .WithMany("Invester")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("FK_Invester_campaign");

                    b.HasOne("Invest_Me_Web_React_Application.Models.User", "User")
                        .WithMany("Invester")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Invester_User");
                });

            modelBuilder.Entity("Invest_Me_Web_React_Application.Models.User", b =>
                {
                    b.HasOne("Invest_Me_Web_React_Application.Models.City", "City")
                        .WithMany("User")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_city_Id");
                });
#pragma warning restore 612, 618
        }
    }
}
